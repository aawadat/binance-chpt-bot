const fs = require('fs');
const path = require('path');
const axios = require('axios');
const colors = require('colors');
const readline = require('readline');

class Binance {
    constructor() {
        this.headers = {
            "Accept": "*/*",
            "Content-Type": "application/json",
            "User-Agent": "Mozilla/5.0",
        };
        this.axios = axios.create({ headers: this.headers });
        this.game_response = null;
        this.game = null;
    }

    log(msg, type = 'info') {
        const timestamp = new Date().toLocaleTimeString();
        console.log(`[${timestamp}] [${type}] ${msg}`.green);
    }

    async countdown(seconds) {
        for (let i = seconds; i > 0; i--) {
            readline.cursorTo(process.stdout, 0);
            process.stdout.write(`Waiting ${i} seconds...`);
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        readline.cursorTo(process.stdout, 0);
        readline.clearLine(process.stdout, 0);
    }

    async callBinanceAPI(queryString) {
        const accessTokenUrl = "https://www.binance.com/bapi/growth/v1/friendly/growth-paas/third-party/access/accessToken";
        const userInfoUrl = "https://www.binance.com/bapi/growth/v1/friendly/growth-paas/mini-app-activity/third-party/user/user-info";

        try {
            const accessTokenResponse = await this.axios.post(accessTokenUrl, { queryString, socialType: "telegram" });
            const accessToken = accessTokenResponse.data.data.accessToken;

            const userInfoResponse = await this.axios.post(userInfoUrl, { resourceId: 2056 }, { headers: { "X-Growth-Token": accessToken } });
            return { userInfo: userInfoResponse.data.data, accessToken };
        } catch (error) {
            this.log(`API call failed: ${error.message}`, 'error');
            return null;
        }
    }

    async main() {
        const dataFile = path.join(__dirname, 'data.txt');
        const data = fs.readFileSync(dataFile, 'utf8').trim().split('\n');

        for (const queryString of data) {
            await this.callBinanceAPI(queryString);
            await this.countdown(60); // Example for countdown
        }
    }
}

const client = new Binance();
client.main().catch(err => {
    console.error(err.message);
    process.exit(1);
});
